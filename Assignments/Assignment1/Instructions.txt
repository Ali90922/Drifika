COMP 3430 Assignment 1

File system implementation

Franklin Bristow

Winter 2025

Description
General submission requirements
Not quite POSIX
exFAT documentation
Volumes
Interface
Implementation notes
Sectors ↔︎ clusters
Root directory and cluster number offsets
Directory entries
Unicode and ASCII
Evaluation
nqp_mount
nqp_open
nqp_read
nqp_getdents
Submitting your assignment
Description

The first assignment in this course will be to write some code that implements an API for working with file systems. The interface that we’re implementing looks a lot like the POSIX API, but it’s not quite POSIX.

Assignment 1 is due Friday, February 7th Wednesday, February 12th, 2025 at 4pm.

This assignment is assessing you on the following learning outcomes:

Write code to read a file system.
General submission requirements

All code must compile and run on Aviary.
All code must run to successful completion. Premature termination for any reason (no obvious output, Segmentation Fault, Bus Error, etc) is considered to be a solution implementation that does not run. For programs that are expected to terminate on their own (without your intervention), programs should complete in a reasonable amount of time (e.g., <30 seconds). Code that does not run to successful completion is eligible to earn a maximum of 50% of the total score in the rubric for the assessed behaviour where the failure occurred.
All solutions must compile. Code that does not compile will not be evaluated at all.
Reminder: All submitted code will be evaluated using an automated similarity testing tool, alongside commonly available online solutions for problems and students submissions from past terms.

Not quite POSIX

Not quite Superman.
Not quite Superman.
In this assignment you will implement an interface that looks a lot like POSIX (but not quite). Your implementation of this interface should be able to work with exFAT-formatted file systems.

You will also evaluate your implementation using programs that behave a lot like the utilities in GNU core utilities.

exFAT documentation

The general structure of the FAT family of file systems, with an emphasis on exFAT, were discussed in class.

Your primary source of information about the exFAT file system format is Microsoft’s exFAT file system specification. This document comprehensively describes the exFAT format.

Volumes

A number of volumes have been prepared for you to test your implementation of exFAT. The volumes are intentionally designed to test both the “happy path” cases of the file system (e.g., a file system with only one very small file on it), and some more edge type cases (e.g., a file system where the cluster size is very small, file data and directory entries for folders are fragmented).

You can find the volumes in a repository on GitLab. More volumes will be added after the initial set are published, notifications of updates will be made verbally in class and also on the course web page. The graders may be using volumes other than these to evaluate your work. This repository contains instructions for creating your own volumes. You are encouraged to make your own volumes to test different behaviour of your implementation with different volumes.

Interface

You can find both an interface and a skeleton assignment structure on GitLab at https://code.cs.umanitoba.ca/comp3430-winter2025/assignment1-template.

Your job is to implement the interface defined in the header file nqp_io.h. This interface describes a read-only interface for a file system, similar to POSIX (but not quite).

A header containing exFAT-implementation-specific structures and values is also provided for your convenience (nqp_exfat_types.h). The types header file contains pre-defined structures for the main boot sector, directory entries, and identifying values for directory entries.

Implementation notes

The exFAT file system specification is comprehensive and generally very good, but some parts of the documentation are not straightforward. Additionally, exFAT supports Unicode characters, and while that’s an excellent property of a file system, working with Unicode characters in C isn’t a great experience.

Below is some additional information that you can use to help guide you through working with exFAT.

Sectors ↔︎ clusters

The first chunk of the file system (3.1 Main and Backup Boot Sector Sub-regions) are organized in sectors, regardless of the number of sectors per cluster.

The FATs are also organized in sectors, but a single FAT may span multiple sectors.

The data heap itself is organized in clusters, which may or may not be the same size as a sector. Make sure that you’re using the right units in the right regions! You should consider writing a utility function or macro that quickly converts from cluster number to bytes or from sector number to bytes.

Root directory and cluster number offsets

An easily overlooked statement in 5.1 Cluster Heap Sub-region is

Importantly, the first cluster of the Cluster Heap has index two, which directly corresponds to the index of FatEntry[2].

That means that cluster indexing is effectively a 2-based array. This means that if, for example, the value in the boot sector for the root directory is 5, then the root directory is actually stored starting at cluster number 3 (5−2=3).

Data					
Cluster number	2	3	4	5	…
Actual index	0	1	2	3	…
Directory entries

Files, directories, and some FS metadata are encoded as directory entries in the data heap region. The description of how to interpret types of directory entries is not great (what the heck does “Benign primary” even mean???).

While you actually can figure out the specific EntryType values by building up sequences of bits for each type of DirectoryEntry, the values have been provided to you as constants in nqp_exfat_types.h.

The directory entries that correspond to one single file will exist as three separate, but sequential directory entries called an entry set:

A file directory entry.
Exactly 1 stream extension directory entry.
At least 1 file name directory entry.
You need to read all of those directory entries to be able to get the name of the file that you’re looking for.

Placement of directory entries

Individual directory entries (like a File or StreamExtension) are contained entirely within one cluster, but an entry set for a single file may span multiple clusters. In other words, if the cluster chain for a directory has more than one cluster (let’s say the cluster chain is 2 → 4 → null), the file entry for a file may be in cluster 2, but the file name directory entry/entries may be in cluster 4.

Cluster number	2	3	4	5	…
Data	
1 File
1 StreamExtension
1 FileName
2 File
2 StreamExtension
2 FileName
3 File
Data for file #1.	
3 StreamExtension
3 FileName
4 File
4 StreamExtension
4 FileName
END-OF-DIRECTORY
END-OF-DIRECTORY
Unicode and ASCII

Many fields in this file system are defined as 16-bit Unicode strings. That means that characters are 16 bits wide instead of 8 bits wide. Provided that your Unicode string consists only of ASCII characters (so unfortunately لا أتحدث اللغة العربية, 沒有中文, ਕੋਈ ਪੰਜਾਬੀ ਨਹੀਂ, and no emoji 🦖), you can trivially convert a Unicode string into a regular C string by stripping off the top 8 bits. The template code has a function called unicode2ascii that implements this approach.

Evaluation

The total number of points eligible to be awarded is 30 points.

Assessment for this assignment is based on the implementation of functions defined in the interface nqp_io.h.

The grading team will have some latitude within the levels of rubrics to make adjustments as appropriate (e.g., an implementation that implements functionality completely up to the criteria for the top level, but does not adequately have minimal design by contract and defensive programming constructs might be assigned the top level, but with a score deduction of -1 to -2 points).

nqp_mount

Level	Description
0

0 points.

nqp_mount is not implemented, or does not meet the criteria for level 1.
1

1 point.

nqp_mount is implemented and:

Has appropriate minimal design by contract and defensive programming constructs (e.g., checks for NULL, validating output from open, etc).
Appropriately opens the file system image for reading.
2

3 points.

nqp_mount is implemented and:

Adequately meets most or all of the criteria for level 1.
Completes basic file system checks on opening the file system image and responds accordingly when the file system is not in a consistent state.
Specifically checks the BootSignature field in the main boot sector, returns NQP_FSCK_FAIL if the value is not the expected value.

3

5 points.

nqp_mount is implemented and:

Adequately meets most or all of the criteria for level 2.
Completes a more comprehensive file system checks on opening the file system image and responds accordingly when the file system is not in a consistent state.
Specifically checks the following fields for validity

FileSystemName
MustBeZero
FirstClusterOfRootDirectory
nqp_open

The level achieved in this function affects the achievable levels for nqp_read, specifically related to opening and reading multiple files at the same time.

Level	Description
0

0 points.

nqp_open is not implemented, or does not meet the criteria for level 1.
1

3 points.

nqp_open is implemented and:

Has appropriate minimal design by contract and defensive programming constructs (e.g., checks for NULL, validating that a file system is mounted before calling).
Is able to find a file in the root directory by name in a file system image where the directory entry set is fully contained within the first cluster of the root directory.
Responds appropriately when the specified file name is not found.
2

5 points.

nqp_open is implemented and:

Adequately meets most or all of the criteria for level 1.
Is able to find a file in a subdirectory by name in a file system image where directory entry sets for a directory are fully contained within a single cluster (i.e., the root directory is contained within a single cluster, the subdirectory is fully contained within its own single cluster).
3

8 points.

nqp_open is implemented and:

Adequately meets most or all of the criteria for level 2.
Is able to find a file in a directory or subdirectory by name in a file system image where directory entry sets for a directory are not fully contained within a single cluster (i.e., the root directory or other directories in the path have more directory entries than fit in a single cluster, and are located in non-contiguous clusters).
4

10 points.

nqp_open is implemented and:

Adequately meets most or all of the criteria for level 3.
Is able to be called multiple times to open multiple files in the file system simultaneously (i.e., minimally implements an open file table to represent different open files.).
Has minimal, appropriate design by contract and defensive programming constructs specifically related to the open file table implementation (e.g., invariants for the entire table, invariants for individual entries in the table).
nqp_read

Level	Description
0

0 points.

nqp_read is not implemented, or does not meet the criteria for level 1.
1

3 points.

nqp_read is implemented and:

Has appropriate minimal design by contract and defensive programming constructs (e.g., checks for NULL, validating that a file system is mounted before calling).
Is able to read data for a file when the file consists of a single cluster, and the request for read is ≤ the cluster size.
2

5 points.

nqp_read is implemented and:

Adequately meets most or all of the criteria for level 1.
Is able to read data for a file when the file consists of many contiguous clusters and the request for read is > the cluster size.
3

8 points.

nqp_read is implemented and:

Adequately meets most or all of the criteria for level 2.
Is able to read data for a file when the file consists of many non-contiguous clusters and the request for read is > the cluster size (i.e., a FAT chain for the file must be constructed to get all the file’s data).
Is able to read data from a file when multiple calls are made to nqp_read. A full implementation of an open file table is not required to achieve this level (i.e., nqp_read will only be called on a single file descriptor).
4

10 points.

nqp_read is implemented and:

Adequately meets most or all of the criteria for level 3.
Adequately meets most or all of the criteria for level 4 of nqp_open (i.e., a minimal open file table is implemented).
Is able to read data from multiple open files where reads for the files are interleaved (e.g., read for file A, then file B, then file A, then file B, …).
nqp_getdents

Level	Description
0

0 points.

nqp_getdents is not implemented, or does not meet the criteria for level 1.
1

2 points.

nqp_getdents is implemented and:

Has appropriate minimal design by contract and defensive programming constructs (e.g., checks for NULL, validating that a file system is mounted before calling).
Is able to return the directory entries for the root directory when the root directory is limited to a single cluster.
2

3 points.

nqp_getdents is implemented and:

Adequately meets most or all of the criteria for level 1.
Appropriately checks that the passed file descriptor refers to a directory.
Is able to return the directory entries for a directory other than the root directory (i.e., a subdirectory) where the directory is limited to a single cluster.
3

4 points.

nqp_getdents is implemented and:

Adequately meets most or all of the criteria for level 2.
Is able to return directory entries for any directory when the directory entries for the directory span multiple non-contiguous clusters.
Is able to return directory entries when multiple calls are made to nqp_getdents. A full implementation of an open file table is not required to achieve this level (i.e., nqp_getdents will only be called on a single file descriptor).
4

5 points.

nqp_getdents is implemented and:

Adequately meets most or all of the criteria for level 3.
The open file table has been modified to support directories (if necessary).
Is able to return directory entries for different directories when called with different file descriptors (e.g., read some entries for directory A, then some for directory B, then some for directory A, then…).
Submitting your assignment

Submissions will be made using the handin command available on all CS UNIX systems.

You should be submitting at least the following files:

A Makefile.
A README.md that includes a summary of how to compile and run your program (compiling should be “run make”, but you should tell the grader how to run your program, e.g., what arguments to pass to the program on the command line).
Your implementation of exFAT.
Assuming you started from the template, all of these files are there, though you should make changes to your README.md with your own information.

Please do not include any disk images in your submission.

If your files are in a folder named my_a1, you would run the command:

handin 3430 assignment1 my_a1
If you need more information, you can see man handin or take a look at the handin chapter in the Intro to Tools and Techniques in CS textbook.
